name: CI Pipeline

# The CI pipeline runs whenever a pull request that modifies the package's
# build configuration or source files is opened, synchronized (i.e., updated
# due to a new push to the branch that is tracked by the pull request) or
# reopened. If just the README or documentation changes, the pipeline does
# not have to run. It also runs when the workflow configuration changed itself.
#
# When such a pull request is merged the resulting `push` event on the main
# branch triggers another run of the CI pipeline. This is necessary because
# there could be changes to the main branch that are not compatible with the
# pull request but don't prevent fast-forward merging.
#
# Most jobs below are disabled in draft pull requests. When such a draft
# pull request becomes ready for review, the CI pipeline is triggered again
# such that the remaining jobs run as well.
on:
  pull_request:
    types:
    - opened
    - reopened
    - synchronize
    - ready_for_review
    paths:
    - 'haskell-src-transformations.cabal'
    - 'src/**'
    - '.github/workflows/ci-pipeline.yml'
  push:
    branches:
    - 'main'
    paths:
    - 'haskell-src-transformations.cabal'
    - 'src/**'
    - '.github/workflows/ci-pipeline.yml'

jobs:
  #############################################################################
  # Compilation                                                               #
  #############################################################################

  # Builds the library, executable, unit tests and dependencies using Cabal.
  #
  # Compiled modules are cached for subsequent jobs or pipeline runs.
  # Unfortunately, the entire code of this job that handles the setup of
  # the cache (steps between `SETUP CACHE` and `END SETUP CACHE`) needs to
  # be replicated to restore the caches in all jobs that use Cabal.
  #
  # We cache `~/.cabal/packages`, `~/.cabal/store` and `dist-newstyle`.
  # The cache keys have the following format
  #
  #     <os>-cabal-<branch>-<cabal-index-hash>-<cabal-hash>-<source-hash>
  #
  # where
  #
  #  * `<os>` is the name of the operating system.
  #  * `<branch>` is the slug of the of the branch that was pushed to or the
  #    base branch of the pull request that triggered the workflow.
  #  * `cabal-hash` is the SHA-256 hash of the `cabal.project` and
  #    `haskell-src-transformations.cabal` files.
  #  * `cabal-index-hash` is the SHA-256 hash of the `01-index.cache` from
  #    the `~/.cabal/packages` directory.
  #  * `source-hash` is the SHA-256 hash of all Haskell source files in `src`.
  #
  # If there is no matching cache entry for the current key, the files are
  # restored from the cache with the longest matching prefix.
  # Caches from other operating systems are never restored.
  #
  # This job does not run in draft pull requests.
  cabal-build:
    name: Cabal Build
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: ["ubuntu-latest"] # "macos-latest", "windows-latest"
    if: github.event_name != 'pull_request' || !github.event.pull_request.draft
    steps:
    ### SETUP CACHE ###########################################################
    - name: Checkout
      uses: actions/checkout@v2
    - name: Setup Haskell
      uses: actions/setup-haskell@v1.1
      with:
        ghc-version: '8.6.5'
        cabal-version: '3.2'
    - name: Update Cabal Package List
      id: cabal-update
      run: cabal new-update
    - name: Prepare Cache Keys
      id: cache-keys
      env:
        TARGET_REF: ${{ github.base_ref || github.ref }}
      run: |
        ./.github/scripts/slug.sh "$TARGET_REF" "TARGET_REF_SLUG"
        echo "::set-output name=cabal-index-hash::$(cat ~/.cabal/packages/**/01-index.cache | sha256sum -b | awk '{ print $1 }')"
        echo "::set-output name=cabal-hash::$(cat cabal.project haskell-src-transformations.cabal | sha256sum | awk '{ print $1 }')"
        echo "::set-output name=haskell-source-hash::$(cat $(find src -name '*.hs') | sha256sum | awk '{ print $1 }')"
    - name: Cache Cabal directories
      uses: actions/cache@v2
      with:
        path: |
          ~/.cabal/packages
          ~/.cabal/store
          dist-newstyle
        key: ${{ matrix.os }}-cabal-${{ env.TARGET_REF_SLUG }}-${{ steps.cache-keys.outputs.cabal-index-hash }}-${{ steps.cache-keys.outputs.cabal-hash }}-${{ steps.cache-keys.outputs.haskell-source-hash }}
        restore-keys: |
          ${{ matrix.os }}-cabal-${{ env.TARGET_REF_SLUG }}-${{ steps.cache-keys.outputs.cabal-index-hash }}-${{ steps.cache-keys.outputs.cabal-hash }}-
          ${{ matrix.os }}-cabal-${{ env.TARGET_REF_SLUG }}-${{ steps.cache-keys.outputs.cabal-index-hash }}-
          ${{ matrix.os }}-cabal-${{ env.TARGET_REF_SLUG }}-
          ${{ matrix.os }}-cabal-
    ### END SETUP CACHE #######################################################

    # Build the package and dependencies.
    - name: Build library dependencies
      run: cabal new-build lib:haskell-src-transformations --dependencies-only
    - name: Build library
      run: cabal new-build lib:haskell-src-transformations

    - name: Build unit test dependencies
      run: cabal new-build haskell-src-transformations-unit-tests --dependencies-only
    - name: Build unit tests
      run: cabal new-build haskell-src-transformations-unit-tests

    - name: Build command line interface dependencies
      run: cabal new-build exe:haskell-src-transformations --dependencies-only
    - name: Build command line interface
      run: cabal new-build exe:haskell-src-transformations

    # Upload the compiler executable artifact.
    # If there are cached builds of previous versions, the `find` command
    # without `-path` option would return all of the cached executables.
    # We are only interested in the executable for the version specified
    # the Cabal configuration file.
    - name: Copy executable to build directory
      run: |
        pkg_name="haskell-src-transformations"
        exe_name="haskell-src-transformations"
        pkg_version=$(cat "$pkg_name.cabal" | grep -P '^version:' | awk '{print $2}')
        exe_path=$(find dist-newstyle -path "*/$pkg_name-$pkg_version/*" -name "$exe_name" -type f)
        mkdir -p ./build/bin
        cp "$exe_path" "./build/bin/$exe_name"
    - name: Upload executable
      uses: actions/upload-artifact@v2
      with:
        name: executable-${{ matrix.os }}
        path: ./build/bin/haskell-src-transformations

  #############################################################################
  # Unit tests                                                                #
  #############################################################################

  # Run the unit tests against all supported platforms.
  #
  # This job does not run on draft pull requests because its dependencies are
  # skipped in drafts.
  unit-tests:
    name: Unit tests
    needs: [cabal-build]
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: ["ubuntu-latest"] # "macos-latest", "windows-latest"
    steps:
    ### SETUP CACHE ###########################################################
    - name: Checkout
      uses: actions/checkout@v2
    - name: Setup Haskell
      uses: actions/setup-haskell@v1.1
      with:
        ghc-version: '8.6.5'
        cabal-version: '3.2'
    - name: Update Cabal Package List
      id: cabal-update
      run: cabal new-update
    - name: Prepare Cache Keys
      id: cache-keys
      env:
        TARGET_REF: ${{ github.base_ref || github.ref }}
      run: |
        ./.github/scripts/slug.sh "$TARGET_REF" "TARGET_REF_SLUG"
        echo "::set-output name=cabal-index-hash::$(cat ~/.cabal/packages/**/01-index.cache | sha256sum -b | awk '{ print $1 }')"
        echo "::set-output name=cabal-hash::$(cat cabal.project haskell-src-transformations.cabal | sha256sum | awk '{ print $1 }')"
        echo "::set-output name=haskell-source-hash::$(cat $(find src -name '*.hs') | sha256sum | awk '{ print $1 }')"
    - name: Cache Cabal directories
      uses: actions/cache@v2
      with:
        path: |
          ~/.cabal/packages
          ~/.cabal/store
          dist-newstyle
        key: ${{ matrix.os }}-cabal-${{ env.TARGET_REF_SLUG }}-${{ steps.cache-keys.outputs.cabal-index-hash }}-${{ steps.cache-keys.outputs.cabal-hash }}-${{ steps.cache-keys.outputs.haskell-source-hash }}
        restore-keys: |
          ${{ matrix.os }}-cabal-${{ env.TARGET_REF_SLUG }}-${{ steps.cache-keys.outputs.cabal-index-hash }}-${{ steps.cache-keys.outputs.cabal-hash }}-
          ${{ matrix.os }}-cabal-${{ env.TARGET_REF_SLUG }}-${{ steps.cache-keys.outputs.cabal-index-hash }}-
          ${{ matrix.os }}-cabal-${{ env.TARGET_REF_SLUG }}-
          ${{ matrix.os }}-cabal-
    ### END SETUP CACHE #######################################################
    - name: Build unit tests
      run: cabal new-build haskell-src-transformations-unit-tests
    - name: Run unit tests
      run: cabal new-run haskell-src-transformations-unit-tests

  #############################################################################
  # Documentation                                                             #
  #############################################################################

  # We build the documentation on Ubuntu only. The goal of this job is not to
  # generate documentation for deployment but to test whether everything is
  # documented and the documentation can be built without a problem.
  #
  # This job does not run on draft pull requests because its dependencies are
  # skipped in drafts.
  build-docs:
    name: Build Haddock documentation
    needs: [cabal-build]
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: ["ubuntu-latest"]
    steps:
    ### SETUP CACHE ###########################################################
    - name: Checkout
      uses: actions/checkout@v2
    - name: Setup Haskell
      uses: actions/setup-haskell@v1.1
      with:
        ghc-version: '8.6.5'
        cabal-version: '3.2'
    - name: Update Cabal Package List
      id: cabal-update
      run: cabal new-update
    - name: Prepare Cache Keys
      id: cache-keys
      env:
        TARGET_REF: ${{ github.base_ref || github.ref }}
      run: |
        ./.github/scripts/slug.sh "$TARGET_REF" "TARGET_REF_SLUG"
        echo "::set-output name=cabal-index-hash::$(cat ~/.cabal/packages/**/01-index.cache | sha256sum -b | awk '{ print $1 }')"
        echo "::set-output name=cabal-hash::$(cat cabal.project haskell-src-transformations.cabal | sha256sum | awk '{ print $1 }')"
        echo "::set-output name=haskell-source-hash::$(cat $(find src -name '*.hs') | sha256sum | awk '{ print $1 }')"
    - name: Cache Cabal directories
      uses: actions/cache@v2
      with:
        path: |
          ~/.cabal/packages
          ~/.cabal/store
          dist-newstyle
        key: ${{ matrix.os }}-cabal-${{ env.TARGET_REF_SLUG }}-${{ steps.cache-keys.outputs.cabal-index-hash }}-${{ steps.cache-keys.outputs.cabal-hash }}-${{ steps.cache-keys.outputs.haskell-source-hash }}
        restore-keys: |
          ${{ matrix.os }}-cabal-${{ env.TARGET_REF_SLUG }}-${{ steps.cache-keys.outputs.cabal-index-hash }}-${{ steps.cache-keys.outputs.cabal-hash }}-
          ${{ matrix.os }}-cabal-${{ env.TARGET_REF_SLUG }}-${{ steps.cache-keys.outputs.cabal-index-hash }}-
          ${{ matrix.os }}-cabal-${{ env.TARGET_REF_SLUG }}-
          ${{ matrix.os }}-cabal-
    ### END SETUP CACHE #######################################################
    - name: Run Haddock
      run: ./tool/make-docs.sh
    - name: Copy documentation to build directory
      run: |
        pkg_name="haskell-src-transformations"
        pkg_version=$(cat "$pkg_name.cabal" | grep -P '^version:' | awk '{print $2}')
        doc_path=$(find dist-newstyle -path "*/$pkg_name-$pkg_version/*doc/html/$pkg_name" | awk '{print $0"/."}')
        mkdir -p ./build/docs
        cp -R $doc_path ./build/docs
    - name: Upload documentation
      uses: actions/upload-artifact@v2
      with:
        name: documentation
        path: ./build/docs

  #############################################################################
  # Code style                                                                #
  #############################################################################

  # All HLint suggestions should be followed or explicitly ignored
  # in `.hlint.yaml`.
  #
  # This job also runs in draft pull requests. It is relatively cheap to run
  # and all commits should be formatted according to the styleguide anyway.
  hlint:
    name: Run HLint
    runs-on: ubuntu-latest
    container: just95/hlint:3.1.1
    steps:
    - name: Checkout
      uses: actions/checkout@v2
    - name: Check code style using HLint
      run: hlint src

  # All Haskell source files should be formatted using Brittany.
  #
  # This job also runs in draft pull requests. It is relatively cheap to run
  # and all commits should be formatted according to the styleguide anyway.
  brittany:
    name: Run Brittany
    runs-on: ubuntu-latest
    container: just95/brittany:0.12.1.1
    steps:
    - name: Checkout
      uses: actions/checkout@v2
    - name: Check code style using Brittany
      run: ./tool/check-formatting.sh
